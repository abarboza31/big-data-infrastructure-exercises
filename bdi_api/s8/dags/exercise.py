import json
from typing import Optional

import psycopg2
from fastapi import APIRouter, status
from pydantic import BaseModel
from settings import DBCredentials, Settings

settings = Settings()
db_credentials = DBCredentials()

s8 = APIRouter(
    responses={
        status.HTTP_404_NOT_FOUND: {"description": "Not found"},
        status.HTTP_422_UNPROCESSABLE_ENTITY: {"description": "Something is wrong with the request"},
    },
    prefix="/api/s8",
    tags=["s8"],
)

class AircraftReturn(BaseModel):
    icao: str
    registration: Optional[str]
    type: Optional[str]
    owner: Optional[str]
    manufacturer: Optional[str]
    model: Optional[str]

class AircraftCO2(BaseModel):
    icao: str
    hours_flown: float
    co2: Optional[float]

# Load fuel consumption rates (assumed available locally or via S3)
with open('aircraft_type_fuel_consumption_rates.json') as f:
    FUEL_RATES = json.load(f)

def connect_to_db():
    conn_params = {
        "dbname": db_credentials.username,
        "user": db_credentials.username,
        "password": db_credentials.password,
        "host": db_credentials.host,
        "port": db_credentials.port,
    }
    return psycopg2.connect(**conn_params)

@s8.get("/aircraft/", response_model=list[AircraftReturn])
def list_aircraft(num_results: int = 100, page: int = 0):
    """
    List all available aircraft ordered by icao asc from the database.
    Enriched with owner, manufacturer, and model from the aircraft database.
    Only returns aircraft with sightings.
    """
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        offset = page * num_results
        query = """
            SELECT DISTINCT a.icao, a.registration, a.icaotype, d.ownop, d.manufacturer, d.model
            FROM aircraft_sightings a
            LEFT JOIN aircraft_database d ON a.icao = d.icao
            ORDER BY a.icao ASC
            LIMIT %s OFFSET %s
        """
        cursor.execute(query, (num_results, offset))
        results = cursor.fetchall()

        return [
            AircraftReturn(
                icao=r[0], registration=r[1], type=r[2],
                owner=r[3], manufacturer=r[4], model=r[5]
            ) for r in results
        ]
    except Exception:
        raise
    finally:
        cursor.close()
        conn.close()

@s8.get("/aircraft/{icao}/co2", response_model=AircraftCO2)
def get_aircraft_co2(icao: str, day: str):
    """
    Returns CO2 generated by an aircraft on a given day.
    Assumes each sighting is 5 seconds.
    Uses fuel consumption rates from aircraft_type_fuel_consumption_rates.json.
    """
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        query = """
            SELECT COUNT(*), icaotype
            FROM aircraft_sightings
            WHERE icao = %s AND timestamp::date = %s
            GROUP BY icaotype
        """
        cursor.execute(query, (icao, day))
        result = cursor.fetchone()

        if not result:
            return AircraftCO2(icao=icao, hours_flown=0.0, co2=None)

        sighting_count, aircraft_type = result
        hours_flown = (sighting_count * 5) / 3600  # 5 seconds per sighting

        co2 = None
        if aircraft_type in FUEL_RATES:
            galph = FUEL_RATES[aircraft_type]["galph"]
            fuel_used_gal = galph * hours_flown
            fuel_used_kg = fuel_used_gal * 3.04
            co2 = (fuel_used_kg * 3.15) / 907.185

        return AircraftCO2(icao=icao, hours_flown=hours_flown, co2=co2)
    except Exception:
        raise
    finally:
        cursor.close()
        conn.close()
